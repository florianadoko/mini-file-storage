Mini File Storage API

üöÄ Overview

This is a Mini File Storage API built using Express.js and Firebase Storage. The API allows users to upload, download, delete, and manage access for files stored in Firebase.

üìå Features

\*\*User Authentication (JWT-based)

File Uploads to Firebase Storage

File Access Control (Public/Private)

Download and Delete Files

Firestore Metadata Storage

Unit Testing with Jest & Supertest\*\*

üõ†Ô∏è Setup & Installation

_1Ô∏è‚É£ Clone the Repository_

`git clone https://github.com/florianadoko/mini-file-storage.git
cd mini-file-storage-api`

_2Ô∏è‚É£ Install Dependencies_

`npm install`

_3Ô∏è‚É£ Configure Environment Variables_

Create a .env file and add:

`PORT=5001
FIREBASE_STORAGE_BUCKET=your-firebase-bucket
JWT_SECRET=your-secret-key`

_4Ô∏è‚É£ Setup Firebase Credentials_

Download your Firebase service account JSON file.

Place it in the config/ folder and name it firebase-key.json.
It should be structured like this:
~~{
"type": "service_account",
"project_id": "your-project-id",
"private_key_id": "your-private-key-id",
"private_key": "-----BEGIN PRIVATE KEY-----\nYOUR-PRIVATE-KEY\n-----END PRIVATE KEY-----\n",
"client_email": "your-service-account@your-project.iam.gserviceaccount.com",
"client_id": "your-client-id",
"auth_uri": "https://accounts.google.com/o/oauth2/auth",
"token_uri": "https://oauth2.googleapis.com/token",
"auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
"client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/your-service-account-email"
}~~

# API Headers Explanation

To interact with the API, specific headers must be included in requests, particularly for authentication and content type. Below is an explanation of the required headers:
Authorization ‚úÖ Yes (for protected routes) Used for authentication. The value should be a JWT token prefixed with "Bearer ". Authorization: Bearer <your-access-token>
Content-Type ‚úÖ Yes (for JSON requests) Specifies that the request body is in JSON format when sending data. Content-Type: application/json
Accept ‚ùå No (Optional) Used to define the expected response format. Default is JSON. Accept: application/json

üöÄ API Endpoints

1Ô∏è‚É£ User Authentication

‚úÖ Login

**POST /auth/login**

Request Body:

`{
  "email": "test@example.com",
  "password": "password123"
}`

Response:

{
"message": "Login successful",
"token": "your-jwt-token"
}

2Ô∏è‚É£ File Management

‚úÖ Upload File

**POST /files/upload**

Headers:

`{
  "Authorization": "Bearer your-jwt-token"
}`

Form Data:

file (Binary file upload)

accessType ("public" or "private")

Response:

`{
  "message": "File uploaded",
  "fileId": "abc123",
  "fileURL": "https://storage.googleapis.com/..."
}
`
‚úÖ Download File

**GET /files/download/:fileId**
Response: Binary file download

‚úÖ Delete File (Only the owner can delete)

**DELETE /files/:fileId**

Response:

`{
  "message": "File deleted successfully"
}`

‚úÖ Update File Access (Public/Private)

**PATCH /files/:fileId/access**

Request Body:

{
"accessType": "private"
}

Response:
`
{
  "message": "File access updated successfully"
}`

_üß™ Running Unit Tests_

We use Jest & Supertest to test API endpoints.

1Ô∏è‚É£ Install Testing Dependencies

npm install --save-dev jest supertest

2Ô∏è‚É£ Run Tests

npm test

Test Cases Covered:

‚úÖ File Upload, Download, and Deletion
‚úÖ Unauthorized Access Handling
‚úÖ Firestore Metadata Validation
